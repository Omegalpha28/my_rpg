/*
** EPITECH PROJECT, 2024
** csfml-engine
** File description:
** macros
*/

#ifndef MACROS_H_
    #define MACROS_H_

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
    #include "moon.h"
    #include "my.h"

///////////////////////////////////////////////////////////////////////////////
/// \brief Calculates the cube of a number.
///
/// \param x            The input value.
///
/// \return The cube of x.
///
///////////////////////////////////////////////////////////////////////////////
    #define CUBE(x) ((x) * (x) * (x))

///////////////////////////////////////////////////////////////////////////////
/// \brief Calculates the square of a number.
///
/// \param x            The input value.
///
/// \return The square of x.
///
///////////////////////////////////////////////////////////////////////////////
    #define SQUARE(x) ((x) * (x))

///////////////////////////////////////////////////////////////////////////////
/// \brief Macro to calculate the midpoint between two values.
///
/// \param x            The first value
/// \param y            The second value
///
/// \return The midpoint between the two input values
///
///////////////////////////////////////////////////////////////////////////////
    #define MID(x, y) ((x - y) / 2)

///////////////////////////////////////////////////////////////////////////////
/// \brief Transform an integer into a boolean
///
/// \param x            The value to transfrom
///
/// \return The booleanify value
///
///////////////////////////////////////////////////////////////////////////////
    #define BOOL(x) ((x) ? true : false)

///////////////////////////////////////////////////////////////////////////////
/// \brief Compare two strings together
///
/// \param str1         The first string
/// \param str2         The second string
///
/// \return True if the two string are equal, false otherwise
///
///////////////////////////////////////////////////////////////////////////////
    #define CMP(str1, str2) (!my_strcmp(str1, str2))

///////////////////////////////////////////////////////////////////////////////
/// \brief Orealloc shortener
///
/// \param ptr          The pointer to realloc
/// \param size         Size of one object
/// \param n            New number of object
///
/// \return The newly alloced ptr
///
///////////////////////////////////////////////////////////////////////////////
    #define REALLOC(ptr, size, n) (my_orealloc(ptr, size * (n - 1), size * n))

#endif /* !MACROS_H_ */
