/*
** EPITECH PROJECT, 2024
** csfml-engine
** File description:
** objects
*/

#ifndef OBJECTS_H_
    #define OBJECTS_H_

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
    #include "moon.h"

///////////////////////////////////////////////////////////////////////////////
/// \brief Actor class, used to display a creature
///
/// \param self         The creature reference
/// \param sheetId      The current sheet used
/// \param animId       The current animation of the actor
/// \param isVariant    Boolean, if the skin is a variant or original
/// \param variantId    The index of the variant
/// \param position     The position of the actor
/// \param size         The size of the actor
/// \param rotation     The rotation of the actor
///
///////////////////////////////////////////////////////////////////////////////
typedef struct actor_s {
    creatures_t *self;
    sfSprite *sprite;
    uint_t sheetId;
    uint_t animId;
    uint_t frame;
    bool_t isVariant;
    uint_t variantId;
    v2f_t position;
    v2f_t scale;
    float rotation;
    bool_t draw;
    ulong_t time;
} actor_t;

///////////////////////////////////////////////////////////////////////////////
/// \brief Object pool to keep track of loaded and drawed assets
///
/// \param actors       The list of actors
/// \param actorCount   The number of actos
///
///////////////////////////////////////////////////////////////////////////////
extern struct pool_s {
    actor_t **actors;
    uint_t actorCount;
} Pool;

///////////////////////////////////////////////////////////////////////////////
actor_t *actor_create(creatures_t *creature, v2f_t position);

///////////////////////////////////////////////////////////////////////////////
void actor_destroy(actor_t *act);

///////////////////////////////////////////////////////////////////////////////
void actor_move(actor_t *act, v2f_t offset);

///////////////////////////////////////////////////////////////////////////////
void actor_rotate(actor_t *act, float angle);

///////////////////////////////////////////////////////////////////////////////
void actor_scale(actor_t *act, v2f_t factors);

///////////////////////////////////////////////////////////////////////////////
void actor_draw(actor_t *act);

///////////////////////////////////////////////////////////////////////////////
bool_t actor_set_sheet_id(actor_t *act, uint_t id);

///////////////////////////////////////////////////////////////////////////////
bool_t actor_set_sheet(actor_t *act, cstring_t name);

///////////////////////////////////////////////////////////////////////////////
bool_t actor_set_anim_id(actor_t *act, uint_t id);

///////////////////////////////////////////////////////////////////////////////
bool_t actor_set_anim(actor_t *act, cstring_t name);

///////////////////////////////////////////////////////////////////////////////
bool_t actor_set_variant(actor_t *act, cstring_t name, uint_t id);

#endif /* !OBJECTS_H_ */
